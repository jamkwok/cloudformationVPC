################## Cloudformation VPC ##################
## Version: 1.0.0
## Author: James Kwok
## Date: 23/06/2017
########################################################
AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  Environment:
    Description: Environment
    Type: String
    Default: sit
    AllowedValues:
    - sit
Mappings:
   EnvClusterMap:
############# Sit Environment
      sit:
        CIDR: "10.1.0.0/16"
        AZ2a: "ap-southeast-2a"
        AZ2b: "ap-southeast-2b"
        DMZSubnet2aCIDR: "10.1.1.0/24"
        DMZSubnet2bCIDR: "10.1.2.0/24"
        APPSubnet2aCIDR: "10.1.3.0/24"
        APPSubnet2bCIDR: "10.1.4.0/24"
        DATSubnet2aCIDR: "10.1.5.0/24"
        DATSubnet2bCIDR: "10.1.6.0/24"
        BASTIONRange: "0.0.0.0/0" #Globally Accessible
        HTTPSRange: "0.0.0.0/0" #Globally Accessible
        APPPort: "443"
        DATPort: "3306"
Resources:
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: !FindInMap [EnvClusterMap, !Ref Environment, CIDR]
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: "default"
############# Subnets
  DMZ2a:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !FindInMap [EnvClusterMap, !Ref Environment, AZ2a]
      CidrBlock: !FindInMap [EnvClusterMap, !Ref Environment, DMZSubnet2aCIDR]
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
      - Key: "Name"
        Value: "DMZ2a"
  DMZ2b:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !FindInMap [EnvClusterMap, !Ref Environment, AZ2b]
      CidrBlock: !FindInMap [EnvClusterMap, !Ref Environment, DMZSubnet2bCIDR]
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
      - Key: "Name"
        Value: "DMZ2b"
  APP2a:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !FindInMap [EnvClusterMap, !Ref Environment, AZ2a]
      CidrBlock: !FindInMap [EnvClusterMap, !Ref Environment, APPSubnet2aCIDR]
      MapPublicIpOnLaunch: false
      VpcId: !Ref VPC
      Tags:
      - Key: "Name"
        Value: "APP2a"
  APP2b:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !FindInMap [EnvClusterMap, !Ref Environment, AZ2b]
      CidrBlock: !FindInMap [EnvClusterMap, !Ref Environment, APPSubnet2bCIDR]
      MapPublicIpOnLaunch: false
      VpcId: !Ref VPC
      Tags:
      - Key: "Name"
        Value: "APP2b"
  DAT2a:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !FindInMap [EnvClusterMap, !Ref Environment, AZ2a]
      CidrBlock: !FindInMap [EnvClusterMap, !Ref Environment, DATSubnet2aCIDR]
      MapPublicIpOnLaunch: false
      VpcId: !Ref VPC
      Tags:
      - Key: "Name"
        Value: "DAT2a"
  DAT2b:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !FindInMap [EnvClusterMap, !Ref Environment, AZ2b]
      CidrBlock: !FindInMap [EnvClusterMap, !Ref Environment, DATSubnet2bCIDR]
      MapPublicIpOnLaunch: false
      VpcId: !Ref VPC
      Tags:
      - Key: "Name"
        Value: "DAT2b"
############# NACLS
  DMZNacl:
    Type: "AWS::EC2::NetworkAcl"
    Properties:
      Tags:
      - Key: "Name"
        Value: "DMZ"
      VpcId: !Ref VPC
  APPNacl:
    Type: "AWS::EC2::NetworkAcl"
    Properties:
      Tags:
      - Key: "Name"
        Value: "APP"
      VpcId: !Ref VPC
  DATNacl:
    Type: "AWS::EC2::NetworkAcl"
    Properties:
      Tags:
      - Key: "Name"
        Value: "DAT"
      VpcId: !Ref VPC
############# DMZ Associate NACLS to Subnets and NACLs
  DMZNaclAssoc2a:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId: !Ref DMZ2a
      NetworkAclId: !Ref DMZNacl
  DMZNaclAssoc2b:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId: !Ref DMZ2b
      NetworkAclId: !Ref DMZNacl
  DMZAllowNATIngress2a:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref DMZNacl
      RuleNumber: '100'
      Protocol: "6"
      RuleAction: allow
      Egress: 'false'
      CidrBlock: !FindInMap [EnvClusterMap, !Ref Environment, APPSubnet2aCIDR]
      PortRange:
        From: '80'
        To: '80'
  DMZAllowNATIngress2b:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref DMZNacl
      RuleNumber: '200'
      Protocol: "6"
      RuleAction: allow
      Egress: 'false'
      CidrBlock: !FindInMap [EnvClusterMap, !Ref Environment, APPSubnet2bCIDR]
      PortRange:
        From: '80'
        To: '80'
  DMZAllowNATIngress:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref DMZNacl
      RuleNumber: '300'
      Protocol: "6"
      RuleAction: allow
      Egress: 'false'
      CidrBlock: '0.0.0.0/0'
      PortRange:
        From: '1024'
        To: '65535'
  DMZAllowSSHIngress:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref DMZNacl
      RuleNumber: '400'
      Protocol: "6"
      RuleAction: allow
      Egress: 'false'
      CidrBlock: !FindInMap [EnvClusterMap, !Ref Environment, BASTIONRange]
      PortRange:
        From: '22'
        To: '22'
  DMZAllowHTTPSIngress:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref DMZNacl
      RuleNumber: '500'
      Protocol: "6"
      RuleAction: allow
      Egress: 'false'
      CidrBlock: !FindInMap [EnvClusterMap, !Ref Environment, HTTPSRange]
      PortRange:
        From: !FindInMap [EnvClusterMap, !Ref Environment, APPPort]
        To: !FindInMap [EnvClusterMap, !Ref Environment, APPPort]
  DMZAllowEgress:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref DMZNacl
      RuleNumber: '100'
      Protocol: "6"
      RuleAction: allow
      Egress: 'true'
      CidrBlock: !FindInMap [EnvClusterMap, !Ref Environment, BASTIONRange]
      PortRange:
        From: '1024'
        To: '65535'
  DMZAllowHTTPSEgress:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref DMZNacl
      RuleNumber: '200'
      Protocol: "6"
      RuleAction: allow
      Egress: 'true'
      CidrBlock: !FindInMap [EnvClusterMap, !Ref Environment, HTTPSRange]
      PortRange:
        From: '443'
        To: '443'
  DMZAllowHTTPEgress:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref DMZNacl
      RuleNumber: '300'
      Protocol: "6"
      RuleAction: allow
      Egress: 'true'
      CidrBlock: !FindInMap [EnvClusterMap, !Ref Environment, HTTPSRange]
      PortRange:
        From: '80'
        To: '80'
  DMZAllowSSHEgress:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref DMZNacl
      RuleNumber: '400'
      Protocol: "6"
      RuleAction: allow
      Egress: 'true'
      CidrBlock: !FindInMap [EnvClusterMap, !Ref Environment, HTTPSRange]
      PortRange:
        From: '22'
        To: '22'
############# APP Associate NACLS to Subnets and NACLs
  APPNaclAssoc2a:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId: !Ref APP2a
      NetworkAclId: !Ref APPNacl
  APPNaclAssoc2b:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId: !Ref APP2b
      NetworkAclId: !Ref APPNacl
  APPAllowNATIngress2a:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref APPNacl
      RuleNumber: '100'
      Protocol: "6"
      RuleAction: allow
      Egress: 'false'
      CidrBlock: !FindInMap [EnvClusterMap, !Ref Environment, DMZSubnet2aCIDR]
      PortRange:
        From: '1024'
        To: '65535'
  APPAllowNATIngress2b:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref APPNacl
      RuleNumber: '200'
      Protocol: "6"
      RuleAction: allow
      Egress: 'false'
      CidrBlock: !FindInMap [EnvClusterMap, !Ref Environment, DMZSubnet2bCIDR]
      PortRange:
        From: '1024'
        To: '65535'
  APPAllowSSHIngress2a:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref APPNacl
      RuleNumber: '300'
      Protocol: "6"
      RuleAction: allow
      Egress: 'false'
      CidrBlock: !FindInMap [EnvClusterMap, !Ref Environment, DMZSubnet2aCIDR]
      PortRange:
        From: '22'
        To: '22'
  APPAllowSSHIngress2b:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref APPNacl
      RuleNumber: '400'
      Protocol: "6"
      RuleAction: allow
      Egress: 'false'
      CidrBlock: !FindInMap [EnvClusterMap, !Ref Environment, DMZSubnet2bCIDR]
      PortRange:
        From: '22'
        To: '22'
  APPAllowHTTPSIngress2a:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref APPNacl
      RuleNumber: '500'
      Protocol: "6"
      RuleAction: allow
      Egress: 'false'
      CidrBlock: !FindInMap [EnvClusterMap, !Ref Environment, DMZSubnet2aCIDR]
      PortRange:
        From: !FindInMap [EnvClusterMap, !Ref Environment, APPPort]
        To: !FindInMap [EnvClusterMap, !Ref Environment, APPPort]
  APPAllowHTTPSIngress2b:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref APPNacl
      RuleNumber: '600'
      Protocol: "6"
      RuleAction: allow
      Egress: 'false'
      CidrBlock: !FindInMap [EnvClusterMap, !Ref Environment, DMZSubnet2bCIDR]
      PortRange:
        From: !FindInMap [EnvClusterMap, !Ref Environment, APPPort]
        To: !FindInMap [EnvClusterMap, !Ref Environment, APPPort]
  APPAllowEgress2a:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref APPNacl
      RuleNumber: '100'
      Protocol: "6"
      RuleAction: allow
      Egress: 'true'
      CidrBlock: !FindInMap [EnvClusterMap, !Ref Environment, DMZSubnet2aCIDR]
      PortRange:
        From: '1024'
        To: '65535'
  APPAllowEgress2b:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref APPNacl
      RuleNumber: '200'
      Protocol: "6"
      RuleAction: allow
      Egress: 'true'
      CidrBlock: !FindInMap [EnvClusterMap, !Ref Environment, DMZSubnet2bCIDR]
      PortRange:
        From: '1024'
        To: '65535'
  APPAllowHTTPSEgress2a:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref APPNacl
      RuleNumber: '300'
      Protocol: "6"
      RuleAction: allow
      Egress: 'true'
      CidrBlock: '0.0.0.0/0'
      PortRange:
        From: '443'
        To: '443'
  APPAllowHTTPSEgress2b:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref APPNacl
      RuleNumber: '400'
      Protocol: "6"
      RuleAction: allow
      Egress: 'true'
      CidrBlock: '0.0.0.0/0'
      PortRange:
        From: '443'
        To: '443'
  APPAllowHTTPEgress2a:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref APPNacl
      RuleNumber: '500'
      Protocol: "6"
      RuleAction: allow
      Egress: 'true'
      CidrBlock: '0.0.0.0/0'
      PortRange:
        From: '80'
        To: '80'
  APPAllowHTTPEgressb:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref APPNacl
      RuleNumber: '600'
      Protocol: "6"
      RuleAction: allow
      Egress: 'true'
      CidrBlock: '0.0.0.0/0'
      PortRange:
        From: '80'
        To: '80'
  APPAllowDATAEgress2a:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref APPNacl
      RuleNumber: '700'
      Protocol: "6"
      RuleAction: allow
      Egress: 'true'
      CidrBlock: !FindInMap [EnvClusterMap, !Ref Environment, DATSubnet2aCIDR]
      PortRange:
        From: !FindInMap [EnvClusterMap, !Ref Environment, DATPort]
        To: !FindInMap [EnvClusterMap, !Ref Environment, DATPort]
  APPAllowDATAEgressb:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref APPNacl
      RuleNumber: '800'
      Protocol: "6"
      RuleAction: allow
      Egress: 'true'
      CidrBlock: !FindInMap [EnvClusterMap, !Ref Environment, DATSubnet2bCIDR]
      PortRange:
        From: !FindInMap [EnvClusterMap, !Ref Environment, DATPort]
        To: !FindInMap [EnvClusterMap, !Ref Environment, DATPort]
############# DAT Associate NACLS to Subnets and NACLs
  DATaclAssoc2a:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId: !Ref DAT2a
      NetworkAclId: !Ref DATNacl
  DATNaclAssoc2b:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId: !Ref DAT2b
      NetworkAclId: !Ref DATNacl
  DATAllowDataIngress2a:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref DATNacl
      RuleNumber: '100'
      Protocol: "6"
      RuleAction: allow
      Egress: 'false'
      CidrBlock: !FindInMap [EnvClusterMap, !Ref Environment, APPSubnet2aCIDR]
      PortRange:
        From: !FindInMap [EnvClusterMap, !Ref Environment, DATPort]
        To: !FindInMap [EnvClusterMap, !Ref Environment, DATPort]
  DATAllowDataIngress2b:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref DATNacl
      RuleNumber: '200'
      Protocol: "6"
      RuleAction: allow
      Egress: 'false'
      CidrBlock: !FindInMap [EnvClusterMap, !Ref Environment, APPSubnet2bCIDR]
      PortRange:
        From: !FindInMap [EnvClusterMap, !Ref Environment, DATPort]
        To: !FindInMap [EnvClusterMap, !Ref Environment, DATPort]
  DATAllowDataEgress2a:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref DATNacl
      RuleNumber: '100'
      Protocol: "6"
      RuleAction: allow
      Egress: 'true'
      CidrBlock: !FindInMap [EnvClusterMap, !Ref Environment, APPSubnet2aCIDR]
      PortRange:
        From: '1024'
        To: '65535'
  DATAllowDataEgress2b:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref DATNacl
      RuleNumber: '200'
      Protocol: "6"
      RuleAction: allow
      Egress: 'true'
      CidrBlock: !FindInMap [EnvClusterMap, !Ref Environment, APPSubnet2bCIDR]
      PortRange:
        From: '1024'
        To: '65535'
############# Network Foundations
  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
  AttachIGWToVpc:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
  DMZ2aRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: "Name"
        Value: "DMZ2aRouteTable"
  DMZ2bRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: "Name"
        Value: "DMZ2bRouteTable"
  APP2aRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: "Name"
        Value: "APP2aRouteTable"
  APP2bRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: "Name"
        Value: "APP2bRouteTable"
  DAT2aRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: "Name"
        Value: "DAT2aRouteTable"
  DAT2bRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: "Name"
        Value: "DAT2bRouteTable"
############# EIP for Natgateway
  EIPNat2a:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: !Ref VPC
    DependsOn: InternetGateway
  EIPNat2b:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: !Ref VPC
    DependsOn: InternetGateway
############## NAT Gateway
  NAT2a:
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId: !GetAtt EIPNat2a.AllocationId
      SubnetId: !Ref DMZ2a
  NAT2b:
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId: !GetAtt EIPNat2b.AllocationId
      SubnetId: !Ref DMZ2b
############## Routes for DMZ
  DMZ2aToIGW:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref DMZ2aRouteTable
    DependsOn:
    - InternetGateway
  DMZ2aRouteSubnet:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref DMZ2aRouteTable
      SubnetId: !Ref DMZ2a
  DMZ2bToIGW:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref DMZ2bRouteTable
    DependsOn: InternetGateway
  DMZ2bRouteSubnet:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref DMZ2bRouteTable
      SubnetId: !Ref DMZ2b
  ############## Routes for APP
  APP2aToNGW:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref NAT2a
      RouteTableId: !Ref APP2aRouteTable
    DependsOn: InternetGateway
  APP2aRouteSubnet:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref APP2aRouteTable
      SubnetId: !Ref APP2a
  APP2bToNGW:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref NAT2b
      RouteTableId: !Ref APP2bRouteTable
    DependsOn: InternetGateway
  APP2bRouteSubnet:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref APP2bRouteTable
      SubnetId: !Ref APP2b
  ############## Routes for DAT
  DAT2aRouteSubnet:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref DAT2aRouteTable
      SubnetId: !Ref DAT2a
  DAT2bRouteSubnet:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref DAT2bRouteTable
      SubnetId: !Ref DAT2b
  ############## Security Groups
  DMZBastionSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: "Name"
        Value: "DMZBastionSecurityGroup"
      GroupDescription: "Allow ssh to Bastion"
      SecurityGroupIngress:
       -
         IpProtocol: "tcp"
         FromPort: '22'
         ToPort: '22'
         CidrIp: !FindInMap [EnvClusterMap, !Ref Environment, BASTIONRange]
  DMZElbSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: "Name"
        Value: "DMZElbSecurityGroup"
      GroupDescription: "Allow AppSecurityGroup Access to APP"
      SecurityGroupIngress:
       -
         IpProtocol: "tcp"
         FromPort: !FindInMap [EnvClusterMap, !Ref Environment, APPPort]
         ToPort: !FindInMap [EnvClusterMap, !Ref Environment, APPPort]
         CidrIp: !FindInMap [EnvClusterMap, !Ref Environment, HTTPSRange]
  APPEc2SecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: "Name"
        Value: "APPEc2SecurityGroup"
      GroupDescription: "Allow ELB/Bastion Access to APP"
      SecurityGroupIngress:
       -
         IpProtocol: "tcp"
         FromPort: !FindInMap [EnvClusterMap, !Ref Environment, APPPort]
         ToPort: !FindInMap [EnvClusterMap, !Ref Environment, APPPort]
         SourceSecurityGroupId: !Ref DMZElbSecurityGroup
       -
         IpProtocol: "tcp"
         FromPort: '22'
         ToPort: '22'
         SourceSecurityGroupId: !Ref DMZBastionSecurityGroup #Allow bastion hosts to ssh
  DATSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: "Name"
        Value: "DATSecuriyGroup"
      GroupDescription: "Allow AppSecurityGroup Access to Database"
      SecurityGroupIngress:
       -
         IpProtocol: "tcp"
         FromPort: !FindInMap [EnvClusterMap, !Ref Environment, DATPort]
         ToPort: !FindInMap [EnvClusterMap, !Ref Environment, DATPort]
         SourceSecurityGroupId: !Ref APPEc2SecurityGroup
